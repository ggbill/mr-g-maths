!function(e){var o={};function n(r){if(o[r])return o[r].exports;var t=o[r]={i:r,l:!1,exports:{}};return e[r].call(t.exports,t,t.exports,n),t.l=!0,t.exports}n.m=e,n.c=o,n.d=function(e,o,r){n.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,o){if(1&o&&(e=n(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var t in e)n.d(r,t,function(o){return e[o]}.bind(null,t));return r},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},n.p="",n(n.s=7)}([function(e,o){e.exports=require("express")},function(e,o){e.exports=require("cloudinary")},function(e,o){e.exports=require("cors")},function(e,o){e.exports=require("body-parser")},function(e,o){e.exports=require("http")},function(e,o){e.exports=require("path")},function(e,o){e.exports=require("shrink-ray-current")},function(e,o,n){"use strict";n.r(o);var r=n(0),t=n(2),i=n(3);var s,c=(e,o,n)=>{console.info(`${e.method} ${e.originalUrl}`);const r=(new Date).getTime();o.on("finish",()=>{const n=(new Date).getTime()-r,t=`${e.method} ${e.originalUrl} ${o.statusCode} ${n}ms`;console.info(t)}),n()},u=n(1).v2;!function(e){e.GetFolders=async function(){return new Promise((e,o)=>{console.log("get folders"),u.api.root_folders((function(e,o){console.log(o)}))})}}(s||(s={}));const l=n(0).Router();l.get("/",async(e,o)=>{try{const e=await s.GetFolders();o.json(e),o.end()}catch(e){o.status(500),o.end,console.error("Error: ",e)}});var f=l;const a=n(5),d=n(6);var p=n(1).v2;console.log(JSON.stringify(process.env.REACT_APP_CLOUDINARY_URL)),void 0===process.env.CLOUDINARY_URL?(console.warn("!! cloudinary config is undefined !!"),console.warn("export CLOUDINARY_URL or set dotenv file")):(console.log("cloudinary config:"),console.log(p.config()));const g=r();g.use(d()),g.use(t()),g.use(i.json()),g.use(c),g.use("/cloudinary",f),g.use(r.static(a.resolve("..","frontend","build"))),g.get("*",(e,o)=>{o.sendFile(a.resolve("..","frontend","build","index.html"))});var v=g,y=n(4);const b=process.env.PORT||8080,x=y.createServer(v);x.listen(b),x.on("error",e=>{console.error(e)}),x.on("listening",async()=>{console.info(`Listening on a port ${b}`)})}]);